<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF实战分享 | RWZIP</title>
      <link href="/2024/05/20/ctf-rwzip/"/>
      <url>/2024/05/20/ctf-rwzip/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先我们要了解，压缩包本身并不具备隐藏信息的功能，但由于在CTF竞赛中，经常出现压缩包与隐写术结合在一起的题目，所以我们需要掌握在CTF竞赛中有关 ZIP 压缩包题目的常见题型及分析手段。</p><h1 id="常见题型"><a href="#常见题型" class="headerlink" title="常见题型"></a>常见题型</h1><p>CTF中常见的压缩包套路（这些套路也不一定是单独出现，大多数情况都是组合出现的）</p><p>（1） 利用进制转换隐藏信息</p><p>（2） 作为冗余信息或隐藏信息藏在其他文件中，一般是图片</p><p>（3） 简单密码爆破</p><p>（4） 字典爆破/掩码攻击</p><p>（5） 伪加密</p><p>（6） 明文攻击</p><p>（7） CRC32碰撞</p><p>（8） 文件修复</p><p>（9） 冗余信息拼接</p><p>（10）注释隐藏密码4. ZIP文件格式等等。</p><h1 id="背景原理"><a href="#背景原理" class="headerlink" title="背景原理"></a>背景原理</h1><p>首先，我们来看zip文件头协议。</p><h2 id="一个-ZIP-文件由三个部分组成："><a href="#一个-ZIP-文件由三个部分组成：" class="headerlink" title="一个 ZIP 文件由三个部分组成："></a>一个 ZIP 文件由三个部分组成：</h2><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p><img src="/2024/05/20/ctf-rwzip/20170801022644776.jpg" class=""><img src="/2024/05/20/ctf-rwzip/20170801022729323.jpg" class=""><h3 id="1-压缩源文件数据区："><a href="#1-压缩源文件数据区：" class="headerlink" title="1.压缩源文件数据区："></a>1.压缩源文件数据区：</h3><p>50 4B 03 04：这是头文件标记</p><p>14 00：解压文件所需 pkware 版本</p><p>00 00：全局方式位标记（判断有无加密）</p><p>08 00：压缩方式</p><p>5A 7E：最后修改文件时间</p><p>F7 46：最后修改文件日期</p><h3 id="2-压缩源文件目录区："><a href="#2-压缩源文件目录区：" class="headerlink" title="2.压缩源文件目录区："></a>2.压缩源文件目录区：</h3><p>50 4B 01 02：目录中文件文件头标记</p><p>1F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本</p><p>00 00：全局方式位标记（判断是否为伪加密）</p><p>08 00：压缩方式</p><p>5A 7E：最后修改文件时间</p><p>F7 46：最后修改文件日期</p><h3 id="3-压缩源文件目录结束标志："><a href="#3-压缩源文件目录结束标志：" class="headerlink" title="3.压缩源文件目录结束标志："></a>3.压缩源文件目录结束标志：</h3><p>50 4B 05 06：目录结束标记</p><p>00 00：当前磁盘编号</p><p>00 00：目录区开始磁盘编号</p><p>01 00：本磁盘上纪录总数</p><p>01 00：目录区中纪录总数</p><p>59 00 00 00：目录区尺寸大小</p><p>3E 00 00 00：目录区对第一张磁盘的偏移量</p><p>00 00：ZIP 文件注释长度</p><h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><p>工具推荐：Winhex、010 、Bandizip 等</p><p>\1. 首先我们通过题目 RWZIP 标题给的链接下载下来一个压缩包文件：</p><p>RWZIP_e974e05bec738d79cae89fa4936e047c.zip</p><img src="/2024/05/20/ctf-rwzip/1713788643067.jpg" class=""><p>2.先尝试随便用一个 360 压缩包工具打开查看一下</p><p>可以看到里面存在一个 flag.txt 文件并且提示文件损坏，如果强行解压下来里面并没有文件。</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%87.jpg" class=""><p>根据上面提示文件损坏，我们再用 WinRAR 选择保留损坏的文件打开看看，发现提示要密码。</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%871.jpg" class=""><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%872.jpg" class="" title="图片2"><p>再用 Bandizip 打开看看</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%873.jpg" class=""><p>3.接着我们在用其他工具打开，这里用 010 工具演示</p><p>把压缩包直接丢进去直接进行查看</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%874.jpg" class=""><p>刚开始一度以为像是伪加密，后面发现不对</p><p>后面再看了看题目的提示感觉的确方向错了，接着挨个对照标记位进行查看，我们知道文件确定是被加密了</p><p>在工具中我们点击下面红框中部分，就会展开里面的 flag.txt 文件的信息，进行查看</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%875.jpg" class=""><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%876.jpg" class="" title="图片6"><p>这里我们就可以开始分析了，对着前面给出的压缩源文件数据区的图，对照分析，我们可以在工具中挨个往下点击，上面也会显示相对应的 hex16 进制的标记位，还是很方便的，对照查看即可。</p><p>示例：</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%877.jpg" class=""><p>当我们挨个查看到 frCRc 这里就能很明显感觉到不太对劲，通过前面压缩包工具自带的功能我们能清楚的看到</p><p>在 CRC 这个位置全是 0，很明显不对。</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%878.jpg" class=""><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%879.jpg" class="" title="图片9"><p>接着我们开始在 010 工具中直接对其进行修改，到这里这部分基本上就差不多了，然后进行保存即可</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8710.jpg" class=""><p>注意：这里还是推荐使用 Bandizip 这样的压缩包工具，因为用其他的可能还是提示文件有问题损坏什么的</p><p>前面我们知道还是需要有密码，那么我们就可以用该工具进行密码恢复，点击左上角工具-密码恢复</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8711.jpg" class=""><p>这里需要注意：普通版本只能恢复 4 位数加密密码，专业版才能支持 6 位</p><p>导入压缩包文件，接着一直点继续一般默认设置即可</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8712.jpg" class=""><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8713.jpg" class="" title="图片13"><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8714.jpg" class="" title="图片14"><p>然后这里点击开始，就可以看到只用了 4 秒密码就出来了。</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8715.jpg" class=""><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8716.jpg" class="" title="图片16"><p>最后再解压缩文件，打开 flag.txt 文件</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8717.jpg" class=""><p>再进行仅字母反转即可</p><img src="/2024/05/20/ctf-rwzip/%E5%9B%BE%E7%89%8718.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm部署k8s1.23.0单节点集群1</title>
      <link href="/2024/05/20/kubeadm-bu-shu-k8s1-23-0-dan-jie-dian-ji-qun-1/"/>
      <url>/2024/05/20/kubeadm-bu-shu-k8s1-23-0-dan-jie-dian-ji-qun-1/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：K8S介绍及集群部署"><a href="#第一章：K8S介绍及集群部署" class="headerlink" title="第一章：K8S介绍及集群部署"></a>第一章：K8S介绍及集群部署</h1><img src="/2024/05/20/kubeadm-bu-shu-k8s1-23-0-dan-jie-dian-ji-qun-1/1.png" class=""><p>kubernetes（k8s)是2014年由Google公司基于Go语言编写的一款开源的容器集群编排系统，用于自动化容器的部署、扩缩容和管理；</p><p>kubernetes（k8s）是基于Google内部的Borg系统的特征开发的一个版本，集成了Borg系统大部分优势；</p><p>官方地址：<a href="https://kubernetes.io/">https://Kubernetes.io</a></p><p>代码托管平台：<a href="https://github.com/Kubernetes">https://github.com/Kubernetes</a></p><p><strong>除了k8s还有哪些容器编排系统？</strong>如：docker swarm、Openshift、Rancher、Mesos等。</p><h4 id="k8s具备的功能"><a href="#k8s具备的功能" class="headerlink" title="k8s具备的功能"></a>k8s具备的功能</h4><ul><li>自我修复：k8s监控容器的运行状况，并在容器出现异常时自动对其重启；</li><li>弹性伸缩：k8s可根据资源使用情况自动地调整容器的副本数。例如，在高峰时段，可自动增加容器的副本数以应对更多的流量；在低峰时段，减少容器的副本数节省资源；</li><li>资源限额：通过对容器所需的CPU和内存资源设置上限，能够更好的管理容器的资源使用量；</li><li>滚动升级：k8s可在不中断服务的情况下滚动升级应用版本，确保在整个过程中服务中断；</li><li>负载均衡：k8s可根据应用的负载情况自动分配流量，确保各实例之间的负载均衡，避免某些实例过载导致性能下降；</li><li>服务发现：通过为实例分配一个统一的访问地址，这样，用户只需要知道这个统一的地址，就可以访问到应用的任意实例，而无需关心具体的实例信息；</li><li>存储管理：k8s可以自动管理应用的存储资源，为应用提供持久化的数据存储。这样，在应用实例发生变化时，用户数据仍能保持一致，确保数据的持久性；</li><li>密钥与配置管理：Kubernetes 允许你存储和管理敏感信息，例如：密码、令牌、证书、ssh密钥等信息进行统一管理，并共享给多个容器复用；</li></ul><h4 id="k8s集群角色"><a href="#k8s集群角色" class="headerlink" title="k8s集群角色"></a>k8s集群角色</h4><p>k8s将多个节点组建成一个集群进⾏统⼀管理，但是在集群内部，这些节点⼜被划分成了两类⻆⾊：</p><ul><li><p><code>Master管理节点</code>：负责集群的所有管理工作； </p></li><li><p><code>Node工作节点</code>：负责运行集群中的容器应用；</p></li></ul><p><strong>Master管理节点组件：</strong></p><ul><li><code>API Server</code>：作为集群的管理入口，处理外部和内部通信，接收用户请求并处理集群内部组件之间的通信；</li><li><code>Scheduler</code>：作为集群资源调度计算，根据调度策略，负责将待部署的 Pods 分配到合适的 Node 节点上；</li><li><code>Controller Manager</code>：管理集群中的各种控制器，例如 Deployment、ReplicaSet、DaemonSet等，管理集群中的各种资源；</li><li><code>etcd</code>：作为集群的数据存储，保存集群的配置信息和状态信息；</li></ul><p><strong>Node工作节点组件：</strong></p><ul><li><code>Kubelet</code>：负责与 Master 节点通信，并根据 Master 节点的调度决策来创建、更新和删除 Pod，同时维护 Node 节点上的容器状态；</li><li><code>容器运行时</code>（如 Docker、containerd 等）：负责运行和管理容器，提供容器生命周期管理功能。例如：创建、更新、删除容器等；</li><li><code>Kube-proxy</code>：负责为集群内的服务实现网络代理和负载均衡，确保服务的访问性；</li></ul><p><strong>非必须的集群插件：</strong></p><ul><li><code>DNS服务</code>：严格意义上的必须插件，在k8s中，很多功能都需要用到DNS服务，例如：服务发现、负载均衡、有状态应用的访问等；</li><li><code>Dashboard</code>： 是k8s集群的Web管理界面；</li><li><code>资源监控</code>：例如metrics-server监视器，用于监控集群中资源利用率；</li></ul><h4 id="k8s集群类型"><a href="#k8s集群类型" class="headerlink" title="k8s集群类型"></a>k8s集群类型</h4><ul><li><p>一主多从集群：由一台Master管理节点和多台Node工作节点组成，生产环境下Master节点存在单点故障的风险，适合学习和测试环境使用；</p></li><li><p>多主多从集群：由多台Master管理节点和多Node工作节点组成，安全性高，适合生产环境使用；</p></li></ul><h4 id="k8s集群规划"><a href="#k8s集群规划" class="headerlink" title="k8s集群规划"></a>k8s集群规划</h4><blockquote><p>提示：系统尽量别带图形界面，图形比较吃内存。</p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>角色</th><th>操作系统</th><th>硬件最低配置</th></tr></thead><tbody><tr><td>master01</td><td>192.168.0.30</td><td>管理节点</td><td>CentOS 7</td><td>2Core/4G内存/50G</td></tr><tr><td>node01</td><td>192.168.0.31</td><td>工作节点</td><td>CentOS 7</td><td>1Core/2G内存/50G</td></tr><tr><td>node02</td><td>192.168.0.32</td><td>工作节点</td><td>CentOS 7</td><td>1Core/2G内存/50G</td></tr></tbody></table><h4 id="集群环境部署"><a href="#集群环境部署" class="headerlink" title="集群环境部署"></a>集群环境部署</h4><p>按照集群规划修改每个节点主机名</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hostnamectl <span class="token function">set-hostname</span> 主机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>提示：以下前期环境准备需要在所有节点都执行</strong> </p><p>配置集群之间本地解析，集群在初始化时需要能够解析到每个节点的主机名</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> <span class="token operator">/</span>etc/hosts 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>10 master01192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>11 node01192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>12 node02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开启bridge网桥过滤功能</strong></p><p><code>bridge</code> (桥接网络) 是 <code>Linux</code> 系统中的一种虚拟网络设备，它充当一个虚拟的交换机，为集群内的容器提供网络通信功能，容器就可以通过这个 <code>bridge</code> 与其他容器或外部网络通信了。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> &gt; <span class="token operator">/</span>etc/sysctl<span class="token punctuation">.</span>d/k8s<span class="token punctuation">.</span>conf &lt;&lt;EOFnet<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>bridge-nf-call-ip6tables = 1net<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>bridge-nf-call-iptables = 1net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>ip_forward = 1EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参数解释：<br>net.bridge.bridge-nf-call-ip6tables = 1  //对网桥上的IPv6数据包通过iptables处理<br>net.bridge.bridge-nf-call-iptables = 1   //对网桥上的IPv4数据包通过iptables处理<br>net.ipv4.ip_forward = 1       //开启IPv4路由转发,来实现集群中的容器与外部网络的通信</p></blockquote><p>由于开启 <code>bridge</code> 功能，需要加载 <code>br_netfilter</code> 模块来允许在 <code>bridge</code> 设备上的数据包经过 <code>iptables</code> 防火墙处理</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">modprobe br_netfilter &amp;&amp; lsmod <span class="token punctuation">|</span> grep br_netfilter<span class="token comment">#...会输出以下内容</span>br_netfilter           22256  0bridge                151336  1 br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载配置文件，使上述配置生效</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sysctl <span class="token operator">-</span>p <span class="token operator">/</span>etc/sysctl<span class="token punctuation">.</span>d/k8s<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置ipvs代理功能</strong></p><p>在k8s中 <code>Service</code> 有两种代理模式，一种是基于 <code>iptables</code> 的，一种是基于 <code>ipvs</code> ，两者对比 <code>ipvs</code> 负载均衡算法更加的灵活，且带有健康检查的功能，如果想要使用 <code>ipvs</code> 模式，需要手动载入 <code>ipvs</code> 模块。</p><p><code>ipset</code> 和 <code>ipvsadm</code>  是两个与网络管理和负载均衡相关的软件包，提供多种负载均衡算法，如轮询（Round Robin）、加权轮询（Weighted Round Robin）、最小连接（Least Connection）、加权最小连接（Weighted Least Connection）等；</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install ipset ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将需要加载的 <code>ipvs</code> 相关模块写入到文件中</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> &gt; <span class="token operator">/</span>etc/sysconfig/modules/ipvs<span class="token punctuation">.</span>modules &lt;&lt;EOF<span class="token comment">#!/bin/bash</span>modprobe <span class="token operator">--</span> ip_vsmodprobe <span class="token operator">--</span> ip_vs_rrmodprobe <span class="token operator">--</span> ip_vs_wrrmodprobe <span class="token operator">--</span> ip_vs_shmodprobe <span class="token operator">--</span> nf_conntrackEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模块介绍：<br>ip_vs                 //提供负载均衡的模块<br>ip_vs_rr            //轮询算法的模块（默认）<br>ip_vs_wrr         //加权轮询算法的模块,根据后端服务器的权重值转发请求<br>ip_vs_sh           //哈希算法的模块,同一客户端的请求始终被分发到相同的后端服务器,保证会话一致性<br>nf_conntrack   //链接跟踪的模块,用于跟踪一个连接的状态,例如 TCP 握手、数据传输和连接关闭等</p></blockquote><p>执行文件来加载模块</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">chmod <span class="token operator">+</span>x <span class="token operator">/</span>etc/sysconfig/modules/ipvs<span class="token punctuation">.</span>modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> ip_vs <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>关闭SWAP分区</strong></p><p>为了保证 <code>kubelet</code> 正常工作要求禁用SWAP，否则集群初始化失败</p><p>临时关闭</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">swapoff <span class="token operator">-</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>永久关闭</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">sed <span class="token operator">-</span><span class="token function">ri</span> <span class="token string">'s/.*swap.*/#&amp;/'</span> <span class="token operator">/</span>etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查swap</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-h</span><span class="token punctuation">..</span>.Swap:            0B          0B          0B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><p>安装 <code>yum-utils</code> 软件提供 <code>yum-config-manager</code> 命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install <span class="token operator">-</span>y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加阿里云 <code>docker-ce</code> 仓库</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum-config-manager <span class="token operator">--</span><span class="token function">add-repo</span> http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/docker-ce/linux/centos/docker-ce<span class="token punctuation">.</span>repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 <code>docker</code> 软件包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install docker-ce-20<span class="token punctuation">.</span>10<span class="token punctuation">.</span>9-3<span class="token punctuation">.</span>el7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用 <code>Cgroup</code> 控制组，用于限制进程的资源使用量，如CPU、内存资源</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mkdir <span class="token operator">/</span>etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> &gt; <span class="token operator">/</span>etc/docker/daemon<span class="token punctuation">.</span>json &lt;&lt;EOF<span class="token punctuation">{</span>        <span class="token string">"exec-opts"</span>: <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 <code>docker</code> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token parameter variable">--now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集群部署方式"><a href="#集群部署方式" class="headerlink" title="集群部署方式"></a>集群部署方式</h4><p>k8s集群有多种部署方式，目前常用的部署方式有如下两种：</p><ul><li><code>kubeadm</code> 部署方式：kubeadm是一个快速搭建kubernetes的集群工具；</li><li>二进制包部署方式：从官网下载每个组件的二进制包，依次去安装，部署麻烦；</li><li>其他方式：通过一些开源的工具搭建，例如：sealos；</li></ul><p>通过 <code>Kubeadm</code> 方式部署k8s集群，需要配置k8s软件仓库来安装集群所需软件，本实验使用阿里云YUM源</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> &gt; <span class="token operator">/</span>etc/yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d/k8s<span class="token punctuation">.</span>repo &lt;&lt;EOF<span class="token namespace">[kubernetes]</span>name=Kubernetesbaseurl=https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/kubernetes/yum/doc/yum-key<span class="token punctuation">.</span>gpg https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com/kubernetes/yum/doc/rpm-package-key<span class="token punctuation">.</span>gpgEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装集群软件，本实验安装k8s 1.23.0版本软件</p><ul><li><code>kubeadm</code>：用于初始化集群，并配置集群所需的组件并生成对应的安全证书和令牌；</li><li><code>kubelet</code>：负责与 Master 节点通信，并根据 Master 节点的调度决策来创建、更新和删除 Pod，同时维护 Node 节点上的容器状态；</li><li><code>kubectl</code>：用于管理k8集群的一个命令行工具；</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install <span class="token operator">-</span>y  kubeadm-1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>0-0  kubelet-1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>0-0 kubectl-1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>0-0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置 <code>kubelet</code> 启用 <code>Cgroup</code> 控制组，用于限制进程的资源使用量，如CPU、内存等</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">cat</span> &gt; <span class="token operator">/</span>etc/sysconfig/kubelet &lt;&lt;EOFKUBELET_EXTRA_ARGS=<span class="token string">"--cgroup-driver=systemd"</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 <code>kubelet</code> 开机自启动即可，集群初始化后自动启动</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">systemctl enable kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h4><p><strong>在master01节点初始化集群</strong>：查看集群所需镜像文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubeadm config images list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#...以下是集群初始化所需的集群组件镜像</span>v1<span class="token punctuation">.</span>27<span class="token punctuation">.</span>1<span class="token punctuation">;</span> falling back to: stable-1<span class="token punctuation">.</span>23k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/kube-apiserver:v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>17k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/kube-controller-manager:v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>17k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/kube-scheduler:v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>17k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/kube-proxy:v1<span class="token punctuation">.</span>23<span class="token punctuation">.</span>17k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/pause:3<span class="token punctuation">.</span>6k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/etcd:3<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1-0k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io/coredns/coredns:v1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要创建集群初始化配置文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubeadm config print init-defaults &gt; kubeadm-config.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件需要修改如下内容</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># cat kubeadm-config.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#...以下是需要修改的内容</span><span class="token comment">#本机IP地址</span>advertiseAddress: 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>10<span class="token comment">#本机名称</span>name: master01<span class="token comment">#集群镜像下载地址，修改为阿里云</span>imageRepository: registry<span class="token punctuation">.</span>cn-hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com/google_containers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集群初始化</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubeadm init --config kubeadm-config.yml --upload-certs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项说明：<br>–upload-certs   //初始化过程将生成证书，并将其上传到etcd存储中，避免证书被移动或者删除，也不会影响集群。</p></blockquote><p>根据集群初始化后的提示，执行以下命令生成集群管理员配置文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># mkdir -p $HOME/.kube</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示将 <code>node</code> 节点加入集群后，在master节点验证</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get nodes</span>NAME       STATUS     ROLES                  master01   NotReady   control-plane<span class="token punctuation">,</span>master   node01     NotReady   &lt;none&gt;               node02     NotReady   &lt;none&gt;               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：如果哪个节点出现问题，可以使用下列命令重置当前节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm  reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="部署Calico网络"><a href="#部署Calico网络" class="headerlink" title="部署Calico网络"></a>部署Calico网络</h4><p><code>Calico</code> 和 <code>Flannel</code> 是两种流行的 k8s 网络插件，它们都为集群中的 Pod 提供网络功能。然而，它们在实现方式和功能上有一些重要区别： </p><p><strong>网络模型的区别：</strong></p><ul><li>Calico 使用 BGP（边界网关协议）作为其底层网络模型。它利用 BGP 为每个 Pod 分配一个唯一的 IP 地址，并在集群内部进行路由。<a href="">Calico 支持网络策略，可以对流量进行精细控制，允许或拒绝特定的通信</a>。</li><li>Flannel 则采用了一个简化的覆盖网络模型。它为每个节点分配一个 IP 地址子网，然后在这些子网之间建立覆盖网络。Flannel 将 Pod 的数据包封装到一个更大的网络数据包中，并在节点之间进行转发。<a href="">Flannel 更注重简单和易用性，不提供与 Calico 类似的网络策略功能</a>。</li></ul><p><strong>性能的区别：</strong></p><ul><li>由于 Calico 使用 BGP 进行路由，其性能通常优于 Flannel。<a href="">Calico 可以实现直接的 Pod 到 Pod 通信，而无需在节点之间进行额外的封装和解封装操作</a>。这使得 Calico 在大型或高度动态的集群中具有更好的性能。</li><li><a href="">Flannel 的覆盖网络模型会导致额外的封装和解封装开销，从而影响网络性能</a>。对于较小的集群或对性能要求不高的场景，这可能并不是一个严重的问题。</li></ul><p>在 <code>master01</code> 节点安装下载 <code>Calico</code> 的yaml文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># wget https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建calico网络</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl apply -f calico.yaml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看calico的Pod状态</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get pod -n kube-system</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">NAME                                      READY   calico-kube-controllers-66966888c4-whdkj   1/1    calico-node-f4ghp                          1/1     calico-node-sj88q                          1/1     calico-node-vnj7f                          1/1     calico-node-vwnw4                          1/1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get nodes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">NAME     STATUS   ROLES                  master   Ready    control-plane<span class="token punctuation">,</span>master   node01   Ready    &lt;none&gt;                 node02   Ready    &lt;none&gt;               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="部署Ingress-nginx代理"><a href="#部署Ingress-nginx代理" class="headerlink" title="部署Ingress-nginx代理"></a>部署Ingress-nginx代理</h4><p><code>Ingress-nginx</code> 相当于一个7层的负载均衡器，集群中的程序对外提供访问，需要通过Ingress代理发布域名。</p><p>资源清单文件下载地址：<a href="https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml">https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml</a> </p><blockquote><p>提示：由于网络原因可能无法下载，直接使用我给大家下载好的文件即可，文件名：ingress-nginx.yml</p></blockquote><p>提前导入<code>ingress-nginx</code> 相关镜像，默认的镜像地址无法下载，导入后创建ingress-nginx.yaml文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl create -f ingress-nginx.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>ingress-nginx</code> 空间下的Pod状态</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get pod -n ingress-nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">NAME                                  READY   STATUSingress-nginx-admission-create-p2428  0/1     Completed ingress-nginx-admission-patch-w9tqj   0/1     Completedingress-nginx-controller-fbf8-s7sj9   1/1     Running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="部署Harbor镜像仓库"><a href="#部署Harbor镜像仓库" class="headerlink" title="部署Harbor镜像仓库"></a>部署Harbor镜像仓库</h4><p>搭建私有镜像仓库，用于存储自己构建的项目镜像。</p><table><thead><tr><th>主机名</th><th>IP地址</th><th>系统版本</th><th>硬件最低配置</th></tr></thead><tbody><tr><td>harbor</td><td>192.168.0.7</td><td>CentOS 7</td><td>1Core/2G内存/20G磁盘</td></tr></tbody></table><p><strong>安装Docker软件包</strong></p><p>安装 <code>yum-utils</code> 软件提供 <code>yum-config-manager</code> 命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># yum install yum-utils -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加阿里云 <code>docker-ce</code> 仓库</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 <code>docker</code> 软件包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># yum install docker-ce-20.10.9 -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 <code>docker</code> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@harbor ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable docker --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传 <code>Docker Compose</code> 程序文件并添加执行权限</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># chmod +x docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># mv docker-compose /usr/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># docker-compose --version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传 <code>harbor</code> 离线包并解压</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># tar -xf harbor-v2.5.1.tgz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入解压目录</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor ~]</span><span class="token comment"># cd harbor</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入<code>Harbor</code> 镜像文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># docker load -i harbor.v2.5.1.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件名称</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># mv harbor.yml.tmpl harbor.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件中的如下内容</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># vim harbor.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#上述内容省略...</span>hostname: 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>7<span class="token comment">#Harbor主机IP地址</span>http:                     <span class="token comment">#访问方式为http（不用修改）</span>  port: 80                <span class="token comment">#默认端口（不用修改）</span><span class="token comment">#https:                    注释https访问方式（需要有效证书才可以使用）</span><span class="token comment"># port: 443                注释https端口</span> <span class="token comment"># certificate: /root/harbor/6864844_kubemsb.com.pem  注释证书文件</span><span class="token comment"># private_key: /root/harbor/6864844_kubemsb.com.key  注释证书密钥文件</span> harbor_admin_password: 12345 <span class="token comment">#admin密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>install.sh</code> 安装脚本</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># ./install.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#出现以下提示表示安装完成</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>✔ <span class="token operator">--</span><span class="token operator">--</span>Harbor has been installed and started successfully<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本机指定 <code>Harbor</code> 仓库地址</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># vim /etc/docker/daemon.json</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">{</span>  <span class="token string">"insecure-registries"</span>: <span class="token punctuation">[</span><span class="token string">"http://192.168.0.7"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启 <code>docker</code> 使配置生效</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 <code>Harbor</code> 仓库（<code>docker</code> 重启后，<code>Harbor</code> 相关组件并不会自动重启，需要手动重启）</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># docker-compose down</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@harbor harbor]</span><span class="token comment"># docker-compose up -d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器访问Harbor页面：<a href="http://192.168.0.25/">http://192.168.0.25/</a></p><table><thead><tr><th><img src="/2024/05/20/kubeadm-bu-shu-k8s1-23-0-dan-jie-dian-ji-qun-1/2.png" class=""></th></tr></thead><tbody><tr><td><img src="/2024/05/20/kubeadm-bu-shu-k8s1-23-0-dan-jie-dian-ji-qun-1/3.png" class=""></td></tr></tbody></table><h4 id="部署NFS存储服务器"><a href="#部署NFS存储服务器" class="headerlink" title="部署NFS存储服务器"></a>部署NFS存储服务器</h4><p>本案例基于NFS作为后端存储设备，来持久化保存k8s容器中的数据。</p><table><thead><tr><th>主机名</th><th>IP地址</th><th>操作系统</th><th>硬件配置</th></tr></thead><tbody><tr><td>k8s-nfs</td><td>192.168.0.8</td><td>CentOS 7</td><td>1Core/2G内存/20G磁盘</td></tr></tbody></table><p>安装NFS软件包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@k8s-nfs ~]</span><span class="token comment"># yum install nfs-utils -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建NFS共享目录</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@k8s-nfs ~]</span><span class="token comment"># mkdir /wordpress-volume</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改NFS配置文件共享目录</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@k8s-nfs ~]</span><span class="token comment"># vim /etc/exports</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span>wordpress-volume 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24<span class="token punctuation">(</span>rw<span class="token punctuation">,</span>no_root_squash<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动NFS</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@k8s-nfs ~]</span><span class="token comment"># systemctl enable nfs --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>k8s集群节点也需要安装 <code>nfs-utils</code> 用于访问NFS服务端（不需要启动程序），否则无法访问NFS服务端。</p><p><code>node01</code> 与 <code>node02</code> 节点安装即可</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@node01 ~]</span><span class="token comment"># yum install nfs-utils -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@node02 ~]</span><span class="token comment"># yum install nfs-utils -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>node01</code> 与 <code>node02</code> 节点访问NFS服务端，查看共享信息</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@node01 ~]</span><span class="token comment"># showmount -e 192.168.0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Export list <span class="token keyword">for</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>8:<span class="token operator">/</span>wordpress-volume 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@node02 ~]</span><span class="token comment"># showmount -e 192.168.0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Export list <span class="token keyword">for</span> 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>8:<span class="token operator">/</span>wordpress-volume 192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建StorageClass动态存储"><a href="#创建StorageClass动态存储" class="headerlink" title="创建StorageClass动态存储"></a>创建StorageClass动态存储</h4><p>如果使用 <code>StorageClass</code> 结合NFS作为后端存储，需要一个 <code>nfs-client-provisioner</code> 程序， 用于与NFS集成。</p><p>需要先为 <code>nfs-client-provisioner</code> 程序提供访问集群的权限，文件下载地址（文件名：rbac.yaml ）：<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy</a></p><p>在 <code>master</code> 节点创建，文件内容如下，内容不需要修改</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># cat nfs-storage-rbac.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token comment"># replace with namespace where provisioner is deployed</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"nodes"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumes"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumeclaims"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storage.k8s.io"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storageclasses"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> run<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token comment"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token comment"># replace with namespace where provisioner is deployed</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token comment"># replace with namespace where provisioner is deployed</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token comment"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建文件</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl create -f nfs-storage-rbac.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 <code>nfs-client-provisioner</code> 程序，文件下载地址（文件名：deployment.yaml )：<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy</a></p><p>在 <code>master</code> 节点创建，文件内容如下，需要修改文件中的NFS地址及共享目录名称</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># cat nfs-client-provisioner.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token comment"># replace with namespace where provisioner is deployed</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Recreate  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>provisioner          <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.k8s.io/sig<span class="token punctuation">-</span>storage/nfs<span class="token punctuation">-</span>subdir<span class="token punctuation">-</span>external<span class="token punctuation">-</span>provisioner<span class="token punctuation">:</span>v4.0.2          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>root              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /persistentvolumes          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> PROVISIONER_NAME              <span class="token key atrule">value</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>sigs.io/nfs<span class="token punctuation">-</span>subdir<span class="token punctuation">-</span>external<span class="token punctuation">-</span>provisioner            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NFS_SERVER              <span class="token key atrule">value</span><span class="token punctuation">:</span> 192.168.0.8             <span class="token comment">#传递NFS服务器IP地址</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> NFS_PATH              <span class="token key atrule">value</span><span class="token punctuation">:</span> /wordpress<span class="token punctuation">-</span>volume       <span class="token comment">#传递NFS服务器共享路径</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token punctuation">-</span>root          <span class="token key atrule">nfs</span><span class="token punctuation">:</span>            <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.0.8              <span class="token comment">#后端NFS服务器IP地址</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /wordpress<span class="token punctuation">-</span>volume          <span class="token comment">#后端NFS服务器共享路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当 nfs-client-provisioner 创建 PV 时，它会生成这些配置文件，并将它们存储在 /persistentvolumes 目录中。PV 配置文件仅包含了 PV 的元数据和 NFS 服务器的连接信息，而不包括实际的数据。数据仍然存储在 NFS 服务器上的 /storageclass 目录中。</p></blockquote><p><strong>提示：</strong>该文件中的镜像默认无法下载，需提前导入到两台 <code>node</code>节点。</p><p>创建 <code>nfs-provisioner</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl create -f nfs-client-provisioner.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>nfs-provisioner</code> 的Pod</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get pod</span>NAME                                     READY  STATUSnfs-client-provisioner-6cc8645fd5-gxmdw   1/1   Running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建StorageClass动态存储，文件参考地址（文件名：class.yaml )：<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/tree/master/deploy</a></p><p>在 <code>master</code> 节点创建，文件内容如下，内容不需要修改</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># cat nfs-storageclass.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>client<span class="token key atrule">provisioner</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>sigs.io/nfs<span class="token punctuation">-</span>subdir<span class="token punctuation">-</span>external<span class="token punctuation">-</span>provisioner<span class="token key atrule">parameters</span><span class="token punctuation">:</span>                     <span class="token comment">#向底层存储系统传递配置信息</span>  <span class="token key atrule">archiveOnDelete</span><span class="token punctuation">:</span> <span class="token string">"false"</span>      <span class="token comment">#PV被删除时，false表示数据也会被删除，设定为true数据保留</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：以上配置仅用于底层是NFS，其他存储设备还需要参考地址：<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/">https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/</a></p><p>创建 <code>storageclass</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl apply -f nfs-storageclass.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>storageclass</code> 信息</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master01 ~]</span><span class="token comment"># kubectl get sc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>字段说明：<br>NAME                    //存储名称。<br>PROVISIONER          //对应的provisioner名称。<br>RECLAIMPOLICY          //PV回收策略，通常是Delete(删除)或Retain(保留)。<br>VOLUMEBINDINGMODE//卷绑定模式，例如Immediate(无论是否有Pod使用该PVC，都会立即与合适的PVC绑定)或WaitForFirstConsumer(直到有Pod使用该PVC时，才会与PV绑定)。<br>ALLOWVOLUMEEXPANSION//是否允许对卷进行扩容,false不允许(NFS不支持扩容，云存储和分布式支持)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> k8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的hexo-theme-matery主题搭建之代码高亮坑点</title>
      <link href="/2021/10/03/hello-word/"/>
      <url>/2021/10/03/hello-word/</url>
      
        <content type="html"><![CDATA[<h1 id="matery主题代码高亮坑点"><a href="#matery主题代码高亮坑点" class="headerlink" title="matery主题代码高亮坑点"></a>matery主题代码高亮坑点</h1><p>看了网上的一些一些文章介绍，这里容易有一些误区需要注意</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>{</code> 和 <code>}</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h2 id="接下来需要注意的问题"><a href="#接下来需要注意的问题" class="headerlink" title="接下来需要注意的问题"></a>接下来需要注意的问题</h2><p>网上的各种改文件：</p><p><strong>就这么一个小细节，这里坑了我好久，改了各种 JS 和 css 根本没必要</strong></p><p><strong>我这里用的hexo: 7.1.1，主题也是最新的。</strong></p><p>要在根目录下配置文件_config.yml中修改</p><p>主要还是这里的问题： syntax_highlighter: highlight.js</p><p>这里记得也要修改配置为：syntax_highlighter: prismjs</p><h3 id="错误配置"><a href="#错误配置" class="headerlink" title="错误配置"></a>错误配置</h3><img src="/2021/10/03/hello-word/%E5%9B%BE%E7%89%872.jpg" class=""><img src="/2021/10/03/hello-word/%E5%9B%BE%E7%89%87.jpg" class=""><h3 id="正确配置"><a href="#正确配置" class="headerlink" title="正确配置"></a>正确配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs      <span class="token comment"># highlight.js/prismjs ，# 7.0版本后采用取消了用enable开关</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># highlight.js 不支持行号显示</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 属于 highlight.js 的特性，可自动检测代码块的语言。比较耗资源，建议关闭，写代码块时标记语言为好。</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token comment"># 用代码内的 tab (\t) 替换为给定值，默认值是两个空格。</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">prismjs</span><span class="token punctuation">:</span>          <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># F 浏览器端高亮/ T 服务器端高亮   </span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 行号显示</span>  <span class="token key atrule">line_threshold</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment"># 接受一个可选的阈值，只有代码块的行数超过这个阈值才显示行数，默认值为 0。</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置完后要重新清除生成一次，不然不会自动更新配置上去的</strong></p><pre class="line-numbers language-git" data-language="git"><code class="language-git">hexo clean &amp;&amp; hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>瞬间就都好了！！！</p><img src="/2021/10/03/hello-word/%E5%9B%BE%E7%89%873.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
